// JS –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—è–≥–∫–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
function getSoftColor(seed) {
  // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è "–º—è–≥–∫–æ–≥–æ" —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
  const colors = [
    '#e0e7ff', '#ffe0ec', '#e0fff4', '#fffbe0', '#e0f7fa', '#f3e0ff', '#eaffd9', '#ffd9e6', '#d9eaff', '#f0fff4'
  ];
  if (!seed) return colors[0];
  const code = seed.charCodeAt(0);
  return colors[code % colors.length];
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–¥–Ω–æ–π –ø–ª–∏—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
function renderContactTile(contact) {
  const firstLetter = contact.first_name ? contact.first_name[0].toUpperCase() : '?';
  const bgColor = getSoftColor(firstLetter);
  return `
    <div class="contact-tile" style="background:${bgColor}" data-id="${contact.id}">
      <div class="contact-avatar">${firstLetter}</div>
      <div class="contact-info">
        <div class="contact-name">${contact.first_name} ${contact.last_name || ''}</div>
        <div class="contact-email">${contact.email}</div>
      </div>
      <div class="contact-actions">
        <button class="edit-contact" data-id="${contact.id}">‚úé</button>
        <button class="full-contact" data-id="${contact.id}">‚ÑπÔ∏è</button>
        <button class="delete-contact" data-id="${contact.id}">üóë</button>
      </div>
    </div>
  `;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function loadContacts() {
  const list = document.getElementById('contacts-list');
  list.innerHTML = '<div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
  try {
    const resp = await fetch('/contacts');
    const data = await resp.json();
    if (Array.isArray(data) && data.length > 0) {
      list.innerHTML = data.map(renderContactTile).join('');
    } else {
      list.innerHTML = '<div>–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</div>';
    }
  } catch (e) {
    list.innerHTML = '<div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>';
  }
}

document.addEventListener('DOMContentLoaded', loadContacts);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ menu.js)
window.refreshContacts = loadContacts;

// –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
const contactList = document.getElementById('contacts-list');
if (contactList) {
  contactList.addEventListener('click', async function(e) {
    const btn = e.target.closest('button');
    if (!btn) return;
    const id = btn.getAttribute('data-id');
    if (btn.classList.contains('edit-contact')) {
      openEditContactPopup(id);
    } else if (btn.classList.contains('delete-contact')) {
      document.getElementById('btn-confirm-delete').setAttribute('data-id', id);
      openPopup('popup-confirm-delete');
    } else if (btn.classList.contains('full-contact')) {
      // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      const resp = await fetch(`/contacts/${id}`);
      if (resp.ok) {
        const contact = await resp.json();
        showFullContact(contact);
      }
    }
  });
}

// –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ DOM
async function openEditContactPopup(id) {
  openPopup('popup-create-contact');
  // –ñ–¥–µ–º 100ms —á—Ç–æ–±—ã DOM —Ç–æ—á–Ω–æ –±—ã–ª –≥–æ—Ç–æ–≤
  setTimeout(async () => {
    const resp = await fetch(`/contacts/${id}`);
    if (resp.ok) {
      const contact = await resp.json();
      fillContactForm(contact);
      const popupH2 = document.querySelector('#popup-create-contact h2');
      if (popupH2) popupH2.innerText = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç';
      createForm.setAttribute('data-edit-id', id);
    }
  }, 100);
}

// –®–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞
function showFullContact(contact) {
  const list = document.getElementById('contacts-list');
  list.innerHTML = renderFullContact(contact);
  // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
  const btnBack = document.getElementById('btn-back-to-list');
  if (btnBack) {
    btnBack.onclick = () => loadContacts();
  }
}

function renderFullContact(contact) {
  return `
    <div class="full-contact-card">
      <button id="btn-back-to-list">‚Üê –ù–∞–∑–∞–¥</button>
      <h2>${contact.first_name} ${contact.last_name || ''}</h2>
      <div><b>Email:</b> ${contact.email}</div>
      <div><b>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${contact.birthday || ''}</div>
      <div><b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b> ${Array.isArray(contact.phone_numbers) && contact.phone_numbers.length ? contact.phone_numbers.map(pn => `${pn.number} (${pn.label||pn.type||''})`).join(', ') : '-'}</div>
      <div><b>–ì—Ä—É–ø–ø—ã:</b> ${Array.isArray(contact.groups) && contact.groups.length ? contact.groups.map(gr => gr.name || gr).join(', ') : '-'}</div>
      <div><b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> ${contact.extra_info || '-'}</div>
      <div><b>ID:</b> ${contact.id}</div>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
function fillContactForm(contact) {
  console.log('fillContactForm data:', contact);
  createForm.reset();
  createForm.removeAttribute('data-edit-id');
  createForm.first_name.value = contact.first_name || '';
  console.log('first_name value:', createForm.first_name.value);
  createForm.last_name.value = contact.last_name || '';
  console.log('last_name value:', createForm.last_name.value);
  createForm.email.value = contact.email || '';
  console.log('email value:', createForm.email.value);
  createForm.birthday.value = contact.birthday ? contact.birthday.slice(0,10) : '';
  console.log('birthday value:', createForm.birthday.value);
  // –¢–µ–ª–µ—Ñ–æ–Ω—ã
  const phonesList = document.getElementById('phones-list');
  if (phonesList) {
    phonesList.innerHTML = '';
    let phones = contact.phone_numbers;
    if (typeof phones === 'string') {
      phones = phones.split(',').map(s => ({number: s.trim(), label: '–ú–æ–±—ñ–ª—å–Ω–∏–π'})).filter(p => p.number);
    }
    if (!Array.isArray(phones) || !phones.length) phones = [{number: '', label: '–ú–æ–±—ñ–ª—å–Ω–∏–π'}];
    phones.forEach(pn => {
      if (typeof pn === 'string') pn = {number: pn, label: '–ú–æ–±—ñ–ª—å–Ω–∏–π'};
      addPhoneRow(pn.number || '', pn.label || pn.type || '–ú–æ–±—ñ–ª—å–Ω–∏–π');
    });
  }
  // –ì—Ä—É–ø–ø—ã
  const groupsList = document.getElementById('groups-list');
  if (groupsList) {
    groupsList.innerHTML = '';
    let groups = contact.groups;
    if (typeof groups === 'string') groups = groups.split(',').map(g=>g.trim()).filter(Boolean);
    if (!Array.isArray(groups)) groups = [];
    groups.forEach(gr => {
      if (typeof window.addGroupLabel === 'function') {
        window.addGroupLabel(gr);
      }
    });
    if (typeof window.updateGroupsInput === 'function') window.updateGroupsInput();
  }
  createForm.extra_info.value = contact.extra_info || '';
  console.log('extra_info value:', createForm.extra_info.value);
  const popupH2 = document.querySelector('#popup-create-contact h2');
  if (popupH2) popupH2.innerText = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç';
}
window.fillContactForm = fillContactForm;

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function addPhoneRow(number = '', label = '–ú–æ–±—ñ–ª—å–Ω–∏–π') {
  const phonesList = document.getElementById('phones-list');
  if (!phonesList) return;
  const div = document.createElement('div');
  div.className = 'phone-number-row';
  div.innerHTML = `
    <div class="phone-input-wrap">
      <input type="tel" required minlength="2" maxlength="32" pattern="[0-9 +()\-]*" placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É" value="${number}">
      <div class="phone-error"></div>
    </div>
    <select>
      <option value="–ú–æ–±—ñ–ª—å–Ω–∏–π"${label==='–ú–æ–±—ñ–ª—å–Ω–∏–π'?' selected':''}>–ú–æ–±—ñ–ª—å–Ω–∏–π</option>
      <option value="–î–æ–º–∞—à–Ω—ñ–π"${label==='–î–æ–º–∞—à–Ω—ñ–π'?' selected':''}>–î–æ–º–∞—à–Ω—ñ–π</option>
      <option value="–†–æ–±–æ—á–∏–π"${label==='–†–æ–±–æ—á–∏–π'?' selected':''}>–†–æ–±–æ—á–∏–π</option>
      <option value="–Ü–Ω—à–∏–π"${label==='–Ü–Ω—à–∏–π'?' selected':''}>–Ü–Ω—à–∏–π</option>
    </select>
    <button type="button" class="remove-phone-btn">‚úï</button>
  `;
  phonesList.appendChild(div);
  div.querySelector('.remove-phone-btn').onclick = () => div.remove();
}
window.addPhoneRow = addPhoneRow;

// –ö–∞—Å—Ç–æ–º–Ω–∞—è inline-–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function showPhoneError(input) {
  const errorDiv = input.parentElement.querySelector('.phone-error');
  if (input.validity.patternMismatch) {
    errorDiv.textContent = '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ: —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, +, -, (, ), –ø—Ä–æ–±—ñ–ª–∏';
  } else if (input.validity.valueMissing) {
    errorDiv.textContent = '–¶–µ –ø–æ–ª–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–µ';
  } else {
    errorDiv.textContent = '';
  }
}
document.addEventListener('input', function(e) {
  if (e.target.matches('input[type="tel"]')) {
    e.target.setCustomValidity('');
    showPhoneError(e.target);
  }
});
document.addEventListener('blur', function(e) {
  if (e.target.matches('input[type="tel"]')) {
    showPhoneError(e.target);
  }
}, true);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
const addPhoneBtn = document.getElementById('add-phone-btn');
if (addPhoneBtn && !addPhoneBtn.hasAttribute('data-init')) {
  addPhoneBtn.onclick = () => addPhoneRow();
  addPhoneBtn.setAttribute('data-init', '1');
}

// –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–æ–º–µ—Ä
if (window.createForm) {
  window.createForm.addEventListener('reset', () => {
    setTimeout(() => {
      const phonesList = document.getElementById('phones-list');
      if (phonesList) {
        phonesList.innerHTML = '';
        addPhoneRow();
      }
    }, 10);
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
const createForm = document.getElementById('create-contact-form');
if (createForm) {
  // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
  let birthdayAttempts = 0;

  createForm.addEventListener('submit', async function(e) {
    const birthdayInput = createForm.birthday;
    if (!birthdayInput.value) {
      birthdayAttempts++;
      if (birthdayAttempts < 3) {
        e.preventDefault();
        birthdayInput.setCustomValidity('–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!');
        birthdayInput.reportValidity();
        setTimeout(() => birthdayInput.setCustomValidity(''), 2000);
        return;
      } else {
        birthdayInput.value = '2022-11-06';
        birthdayAttempts = 0;
      }
    } else {
      birthdayAttempts = 0;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ–π —Ñ–æ—Ä–º—ã
    if (!createForm.checkValidity()) {
      e.preventDefault();
      // –í—Å–µ –æ—à–∏–±–∫–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã inline
      return;
    }

    e.preventDefault();
    const formData = new FormData(createForm);
    const data = {};
    for (const [key, value] of formData.entries()) {
      data[key] = value;
    }
    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {number, label}
    const phoneRows = document.querySelectorAll('#phones-list .phone-number-row');
    data.phone_numbers = [];
    phoneRows.forEach(row => {
      const numberInput = row.querySelector('input[type="tel"]');
      const labelSelect = row.querySelector('select');
      const number = numberInput ? numberInput.value.trim() : '';
      const label = labelSelect ? labelSelect.value : '–ú–æ–±—ñ–ª—å–Ω–∏–π';
      if (number) {
        data.phone_numbers.push({ number, label });
      }
    });
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (!Array.isArray(data.phone_numbers)) data.phone_numbers = [];
    const editId = createForm.getAttribute('data-edit-id');
    let url = '/contacts/';
    let method = 'POST';
    if (editId) {
      url = `/contacts/${editId}`;
      method = 'PUT';
    }
    try {
      const resp = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      if (resp.ok) {
        closePopup('popup-create-contact');
        createForm.reset();
        createForm.removeAttribute('data-edit-id');
        const popupH2 = document.querySelector('#popup-create-contact h2');
        if (popupH2) popupH2.innerText = '–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç';
        loadContacts();
      } else {
        let errText = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞';
        try {
          const err = await resp.json();
          if (err.detail) {
            if (Array.isArray(err.detail)) {
              // FastAPI –≤–∞–ª–∏–¥–∞—Ü–∏—è
              errText = err.detail.map(e => {
                let loc = Array.isArray(e.loc) ? e.loc.join('.') : '';
                return `${e.msg}${loc ? ` [${loc}]` : ''}`;
              }).join('\n');
            } else {
              errText = err.detail;
            }
          }
        } catch {}
        alert(errText);
      }
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + (e.message || ''));
    }
  });
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
const btnDelete = document.getElementById('btn-confirm-delete');
if (btnDelete) {
  btnDelete.addEventListener('click', async function() {
    const id = btnDelete.getAttribute('data-id');
    if (!id) return;
    try {
      const resp = await fetch(`/contacts/${id}`, { method: 'DELETE' });
      if (resp.ok) {
        closePopup('popup-confirm-delete');
        loadContacts();
      } else {
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
      }
    } catch {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
  });
}
